// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proto/metrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsService_BulkUpdate_FullMethodName = "/metrics.MetricsService/BulkUpdate"
	MetricsService_Index_FullMethodName      = "/metrics.MetricsService/Index"
	MetricsService_Show_FullMethodName       = "/metrics.MetricsService/Show"
	MetricsService_Update_FullMethodName     = "/metrics.MetricsService/Update"
)

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsServiceClient interface {
	BulkUpdate(ctx context.Context, in *BulkUpdateMetricsRequest, opts ...grpc.CallOption) (*BulkUpdateMetricsResponse, error)
	Index(ctx context.Context, in *IndexMetricsRequest, opts ...grpc.CallOption) (*IndexMetricsResponse, error)
	Show(ctx context.Context, in *ShowMetricsRequest, opts ...grpc.CallOption) (*ShowMetricsResponse, error)
	Update(ctx context.Context, in *UpdateMetricsRequest, opts ...grpc.CallOption) (*UpdateMetricsResponse, error)
}

type metricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServiceClient(cc grpc.ClientConnInterface) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) BulkUpdate(ctx context.Context, in *BulkUpdateMetricsRequest, opts ...grpc.CallOption) (*BulkUpdateMetricsResponse, error) {
	out := new(BulkUpdateMetricsResponse)
	err := c.cc.Invoke(ctx, MetricsService_BulkUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) Index(ctx context.Context, in *IndexMetricsRequest, opts ...grpc.CallOption) (*IndexMetricsResponse, error) {
	out := new(IndexMetricsResponse)
	err := c.cc.Invoke(ctx, MetricsService_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) Show(ctx context.Context, in *ShowMetricsRequest, opts ...grpc.CallOption) (*ShowMetricsResponse, error) {
	out := new(ShowMetricsResponse)
	err := c.cc.Invoke(ctx, MetricsService_Show_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) Update(ctx context.Context, in *UpdateMetricsRequest, opts ...grpc.CallOption) (*UpdateMetricsResponse, error) {
	out := new(UpdateMetricsResponse)
	err := c.cc.Invoke(ctx, MetricsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServiceServer is the server API for MetricsService service.
// All implementations must embed UnimplementedMetricsServiceServer
// for forward compatibility
type MetricsServiceServer interface {
	BulkUpdate(context.Context, *BulkUpdateMetricsRequest) (*BulkUpdateMetricsResponse, error)
	Index(context.Context, *IndexMetricsRequest) (*IndexMetricsResponse, error)
	Show(context.Context, *ShowMetricsRequest) (*ShowMetricsResponse, error)
	Update(context.Context, *UpdateMetricsRequest) (*UpdateMetricsResponse, error)
	mustEmbedUnimplementedMetricsServiceServer()
}

// UnimplementedMetricsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServiceServer struct {
}

func (UnimplementedMetricsServiceServer) BulkUpdate(context.Context, *BulkUpdateMetricsRequest) (*BulkUpdateMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdate not implemented")
}
func (UnimplementedMetricsServiceServer) Index(context.Context, *IndexMetricsRequest) (*IndexMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedMetricsServiceServer) Show(context.Context, *ShowMetricsRequest) (*ShowMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedMetricsServiceServer) Update(context.Context, *UpdateMetricsRequest) (*UpdateMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMetricsServiceServer) mustEmbedUnimplementedMetricsServiceServer() {}

// UnsafeMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServiceServer will
// result in compilation errors.
type UnsafeMetricsServiceServer interface {
	mustEmbedUnimplementedMetricsServiceServer()
}

func RegisterMetricsServiceServer(s grpc.ServiceRegistrar, srv MetricsServiceServer) {
	s.RegisterService(&MetricsService_ServiceDesc, srv)
}

func _MetricsService_BulkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).BulkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_BulkUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).BulkUpdate(ctx, req.(*BulkUpdateMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).Index(ctx, req.(*IndexMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).Show(ctx, req.(*ShowMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).Update(ctx, req.(*UpdateMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsService_ServiceDesc is the grpc.ServiceDesc for MetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BulkUpdate",
			Handler:    _MetricsService_BulkUpdate_Handler,
		},
		{
			MethodName: "Index",
			Handler:    _MetricsService_Index_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _MetricsService_Show_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MetricsService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/metrics.proto",
}
