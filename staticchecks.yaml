checks:
  # SA1000 - Invalid regular expression
  - SA1000
  # SA1001 - Invalid template
  - SA1001
  # SA1003 - Unsupported argument to functions in encoding/binary
  - SA1003
  # SA1004 - Suspiciously small untyped constant in time.Sleep
  - SA1004
  # SA1005 - Invalid first argument to exec.Command
  - SA1005
  # SA1006 - Printf with dynamic first argument and no further arguments
  - SA1006
  # SA1007 - Invalid URL in net/url.Parse
  - SA1007
  # SA1008 - Non-canonical key in http.Header map
  - SA1008
  # SA1010 - (*regexp.Regexp).FindAll called with n == 0, which will always return zero results
  - SA1010
  # SA1011 - Various methods in the strings package expect valid UTF-8, but invalid input is provided
  - SA1011
  # SA1012 - A nil context.Context is being passed to a function, consider using context.
  - SA1012
  # SA1013 - io.Seeker.Seek is being called with the whence constant as the first argument, but it should be the second
  - SA1013
  # SA1015 - Using time.Tick in a way that will leak. Consider using time.NewTicker,
  # and only use time.Tick in tests, commands and endless functions
  - SA1015
  # SA1016 - Trapping a signal that cannot be trapped
  - SA1016
  # SA1017 - Channels used with os/signal.Notify should be buffered
  - SA1017
  # SA1018 - strings.Replace called with n == 0, which does nothing
  - SA1018
  # SA1019 - Using a deprecated function, variable, constant or field
  - SA1019
  # SA1020 - Using an invalid host:port pair with a net.Listen-related function
  - SA1020
  # SA1021 - Using bytes.Equal to compare two net.IP
  - SA1021
  # SA1023 - Modifying the buffer in an io.Writer implementation
  - SA1023
  # SA1024 - A string cutset contains duplicate characters
  - SA1024
  # SA1025 - It is not possible to use (*time.Timer).Reset’s return value correctly
  - SA1025
  # SA1026 - Cannot marshal channels or functions
  - SA1026
  # SA1027 - Atomic access to 64-bit variable must be 64-bit aligned
  - SA1027
  # SA1029 - Inappropriate key in call to context.WithValue
  - SA1029
  # SA2000 - sync.WaitGroup.Add called inside the goroutine, leading to a race condition
  - SA2000
  # SA2001 - Empty critical section, did you mean to defer the unlock?
  - SA2001
  # SA2002 - Called testing.T.FailNow or SkipNow in a goroutine, which isn’t allowed
  - SA2002
  # SA2003 - Deferred Lock right after locking, likely meant to defer Unlock instead
  - SA2003
  # SA3001 - Assigning to b.N in benchmarks distorts the results
  - SA3001
  # SA4000 - Binary operator has identical expressions on both sides
  - SA4000
  # SA4001 - &*x gets simplified to x, it does not copy x
  - SA4001
  # SA4003 - Comparing unsigned values against negative values is pointless
  - SA4003
  # SA4004 - The loop exits unconditionally after one iteration
  - SA4004
  # SA4005 - Field assignment that will never be observed. Did you mean to use a pointer receiver?
  - SA4005
  # SA4006 - A value assigned to a variable is never read before being overwritten. Forgotten error check or dead code?
  - SA4006
  # SA4008 - The variable in the loop condition never changes, are you incrementing the wrong variable?
  - SA4008
  # SA4009 - A function argument is overwritten before its first use
  - SA4009
  # SA4010 - The result of append will never be observed anywhere
  - SA4010
  # SA4011 - Break statement with no effect. Did you mean to break out of an outer loop?
  - SA4011
  # SA4012 - Comparing a value against NaN even though no value is equal to NaN
  - SA4012
  # SA4013 - Negating a boolean twice (!!b) is the same as writing b. This is either redundant, or a typo.
  - SA4013
  # SA4014	An if/else if chain has repeated conditions and no side-effects;
  # if the condition didn’t match the first time, it won’t match the second time, either
  - SA4014
  # SA4015	Calling functions like math.Ceil on floats converted from integers doesn’t do anything useful
  - SA4015
  # SA4016	Certain bitwise operations, such as x ^ 0, do not do anything useful
  - SA4016
  # SA4017	Discarding the return values of a function without side effects, making the call pointless
  - SA4017
  # SA4018	Self-assignment of variables
  - SA4018
  # SA4019	Multiple, identical build constraints in the same file
  - SA4019
  # SA4020	Unreachable case clause in a type switch
  - SA4020
  # SA4021	x = append(y) is equivalent to x = y
  - SA4021
  # SA4022	Comparing the address of a variable against nil
  - SA4022
  # SA4023	Impossible comparison of interface value with untyped nil
  - SA4023
  # SA4024	Checking for impossible return value from a builtin function
  - SA4024
  # SA4025	Integer division of literals that results in zero
  - SA4025
  # SA4026	Go constants cannot express negative zero
  - SA4026
  # SA4027	(*net/url.URL).Query returns a copy, modifying it doesn’t change the URL
  - SA4027
  # SA4028	x % 1 is always zero
  - SA4028
  # SA4029	Ineffective attempt at sorting slice
  - SA4029
  # SA4030	Ineffective attempt at generating random number
  - SA4030
  # SA4031	Checking never-nil value against nil
  - SA4031
  # SA5000	Assignment to nil map
  - SA5000
  # SA5001	Deferring Close before checking for a possible error
  - SA5001
  # SA5002	The empty for loop (for {}) spins and can block the scheduler
  - SA5002
  # SA5003	Defers in infinite loops will never execute
  - SA5003
  # SA5004	for { select { ... with an empty default branch spins
  - SA5004
  # SA5005	The finalizer references the finalized object, preventing garbage collection
  - SA5005
  # SA5007	Infinite recursive call
  - SA5007
  # SA5008	Invalid struct tag
  - SA5008
  # SA5009	Invalid Printf call
  - SA5009
  # SA5010	Impossible type assertion
  - SA5010
  # SA5011	Possible nil pointer dereference
  - SA5011
  # SA5012	Passing odd-sized slice to function expecting even size
  - SA5012
  # SA6001	Missing an optimization opportunity when indexing maps by byte slices
  - SA6001
  # SA6002	Storing non-pointer values in sync.Pool allocates memory
  - SA6002
  # SA6003	Converting a string to a slice of runes before ranging over it
  - SA6003
  # SA6005	Inefficient string comparison with strings.ToLower or strings.ToUpper
  - SA6005
  # SA9001	Defers in range loops may not run when you expect them to
  - SA9001
  # SA9002	Using a non-octal os.FileMode that looks like it was meant to be in octal.
  - SA9002
  # SA9003	Empty body in an if or else branch
  - SA9003
  # SA9004	Only the first constant has an explicit type
  - SA9004
  # SA9005	Trying to marshal a struct with no public fields nor custom marshaling
  - SA9005
  # SA9006	Dubious bit shifting of a fixed size integer value
  - SA9006
  # SA9007	Deleting a directory that shouldn’t be deleted
  - SA9007
  # SA9008	else branch of a type assertion is probably not reading the right value
  - SA9008
  # ST1000	Incorrect or missing package comment
  - ST1000
  # ST1006	Poorly chosen receiver name
  - ST1006
  # ST1012	Poorly chosen name for error variable
  - ST1012